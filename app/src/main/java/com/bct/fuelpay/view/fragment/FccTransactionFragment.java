package com.bct.fuelpay.view.fragment;

import static com.bct.fuelpay.utils.FragmentUtils.TRANSITION_NONE;

import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.amrdeveloper.lottiedialog.LottieDialog;
import com.bct.fuelpay.R;
import com.bct.fuelpay.adapter.FccTranAdapter;
import com.bct.fuelpay.constant.AppConstant;
import com.bct.fuelpay.databinding.FragmentFccTransactionBinding;
import com.bct.fuelpay.model.ModelTransactions;
import com.bct.fuelpay.utils.FragmentUtils;
import com.bct.fuelpay.utils.SavePrefs;
import com.bct.fuelpay.view_model.FccTranViewModel;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;


public class FccTransactionFragment extends Fragment implements FccTranAdapter.ItemListener {

    FragmentFccTransactionBinding binding;
    ArrayList<ModelTransactions> alTransactionList = new ArrayList<>();
    ModelTransactions modelTransactions;
    FccTranAdapter fccTranAdapter;
    Bundle b;
    String ServerConnection = "";
    String NACKServerConnection = "NO";
    Receiver receiver;
    Sender messageSender;
    static boolean CanRead;
    private Socket client;
    private PrintWriter printwriter;
    DataInputStream din;
    String whichPump,nozzle,grade, whichMenu;



    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fcc_transaction,container,false);



        b = new Bundle();
        b = getArguments();
        whichMenu = b.getString(AppConstant.whichMenu);
        whichPump = b.getString("Pump");
        nozzle = b.getString("Nozzle");
        grade = b.getString("Grade");
//        connectToFCC();
        createDummyTransaction();

        binding.title.setText("PUMP "+whichPump);
        binding.subTitle.setText("NOZZLE NO :"+nozzle+" "+grade);
        binding.title.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                getActivity().getSupportFragmentManager().popBackStack();
            }
        });


        return binding.getRoot();
    }

    private void setupGridView(){
        ArrayList items = new ArrayList<>();

        for (int i = 0;i < alTransactionList.size();i++){
            items.add(new FccTranViewModel(alTransactionList.get(i).getDateTime().substring(8,10)+":"+
                    alTransactionList.get(i).getDateTime().substring(10,12)+":"
                    +alTransactionList.get(i).getDateTime().substring(12,14),
                    alTransactionList.get(i).getDateTime().substring(0,4)+"-"
                            +alTransactionList.get(i).getDateTime().substring(4,6)+
                            "-"+alTransactionList.get(i).getDateTime().substring(6,8),
                    alTransactionList.get(i).getVolume()+" L",
                    alTransactionList.get(i).getAmount()+" "+getResources().getString(R.string.currency)));
        }

        fccTranAdapter = new FccTranAdapter(getActivity(),items);
        binding.recylerview.setLayoutManager(new LinearLayoutManager(getActivity()));
        binding.recylerview.setAdapter(fccTranAdapter);
        fccTranAdapter.setClickListener(this);
    }
    @Override
    public void onTransactionClick(View v, int position) {

        b.putString("transactionId",alTransactionList.get(position).getTranId());
        b.putString("date",alTransactionList.get(position).getDateTime().substring(0,4)+"-"
                +alTransactionList.get(position).getDateTime().substring(4,6)+
                "-"+alTransactionList.get(position).getDateTime().substring(6,8));
        b.putString("time",alTransactionList.get(position).getDateTime().substring(8,10)+":"+
                alTransactionList.get(position).getDateTime().substring(10,12)+":"
                +alTransactionList.get(position).getDateTime().substring(12,14));
        b.putString("Amount",alTransactionList.get(position).getAmount());
        b.putString("volume",alTransactionList.get(position).getVolume());
        b.putString("price",alTransactionList.get(position).getPrice());
        b.putString("attandant",alTransactionList.get(position).getAttandant());
        b.putString("mop",alTransactionList.get(position).getMop());
        b.putString("product",alTransactionList.get(position).getProduct());
        if (whichMenu.equalsIgnoreCase(AppConstant.transaction)) {
            FragmentUtils.replaceFragment((AppCompatActivity) getActivity(), new ReceiptFragment(), b,
                    R.id.fragContainer, true, FragmentUtils.TRANSITION_SLIDE_LEFT_RIGHT);
        }else if (whichMenu.equalsIgnoreCase(AppConstant.fuelSale)) {
            FragmentUtils.replaceFragment((AppCompatActivity) getActivity(), new CartFragment(), b,
                    R.id.fragContainer, true, FragmentUtils.TRANSITION_SLIDE_LEFT_RIGHT);
        }

    }
    private void createDummyTransaction(){
        alTransactionList.clear();
        String result = "<HTRX|2|3033005237,20230330181451,,2,1,2,0.85,8.68,124.77,10.1,1,0,,,2,0,,,,Keith,0,0,0,8.68,|3033005236,20230330181438,,2,1,2,0.5,5.15,123.91,10.1,1,0,,,2,0,,,,Keith,0,0,0,5.15,>????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????";
        int count = Integer.parseInt(result.replace("ï¿½", "").replace("<", "").
                replace(">", "").split("\\|")[1].split("\\,")[0]);
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 1; i <= count; i++){
                    modelTransactions = new ModelTransactions();
                    String splitResult = result.replace("ï¿½", "").replace("<", "").
                            replace(">", "").split("\\|")[i+1];
                    modelTransactions.setTranId(splitResult.split("\\,")[0]);
                    modelTransactions.setDateTime(splitResult.split("\\,")[1]);
                    modelTransactions.setProduct(splitResult.split("\\,")[5]);
                    modelTransactions.setAmount(splitResult.split("\\,")[7]);
                    modelTransactions.setVolume(splitResult.split("\\,")[6]);
                    modelTransactions.setPump(splitResult.split("\\,")[3]);
                    modelTransactions.setPrice(splitResult.split("\\,")[9]);
                    modelTransactions.setVolume(splitResult.split("\\,")[6]);
                    modelTransactions.setMop(splitResult.split("\\,")[10]);
                    modelTransactions.setAttandant(splitResult.split("\\,")[19]);
                    alTransactionList.add(modelTransactions);
                }
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        setupGridView();
//                        dialog.dismiss();
                        Log.e("DONE","DONE");
                    }
                });
            }
        });
        thread.start();
        Log.e("HTRX COUNT",""+result.replace("ï¿½", "").replace("<", "").
                replace(">", "").split("\\|")[1].split("\\,")[0]);

    }
    private void connectToFCC(){
        String strServerIp = SavePrefs.getString(AppConstant.prefName, getActivity(), AppConstant.ipPref, null);
        String strServerPort = SavePrefs.getString(AppConstant.prefName, getActivity(), AppConstant.portPref, null);
        try {
            if (strServerIp == null & strServerPort == null) {
                FragmentUtils.replaceFragment((AppCompatActivity) getActivity(),new FccSettingFragment(),
                        R.id.fragContainer,false, TRANSITION_NONE);
            }else {
                CanRead = true;
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                    new ChatOperator().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
                } else {
                    new ChatOperator().execute();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            Log.e("EXCEPTION","exception");
        }
    }
    private class ChatOperator extends AsyncTask<Void, Void, Void> {

        LottieDialog dialog;

        public ChatOperator() {
        }

        @SuppressWarnings("unused")
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            dialog = new LottieDialog(getActivity())
                    .setAnimation(R.raw.progress_loading)
                    .setMessageTextSize(20)
                    .setAutoPlayAnimation(true)
                    .setDialogHeightPercentage(.3f)
                    .setDialogBackground(R.color.background)
                    .setAnimationRepeatCount(LottieDialog.INFINITE)
                    .setMessage("Fetching data...");
            dialog.setCancelable(false);
            dialog.show();

        }

        @SuppressWarnings("unused")
        @Override
        protected Void doInBackground(Void... arg0) {
            try {
                ServerConnection = "";
                NACKServerConnection = "NO";
                String strServerIp = SavePrefs.getString(AppConstant.prefName, getActivity(), AppConstant.ipPref, null);
                String strServerPort = SavePrefs.getString(AppConstant.prefName, getActivity(), AppConstant.portPref, null);

                if (strServerIp == null) {
//                    getResources().getString(R.string.string_ip);//default ip address
                }
                if (strServerPort == null) {
//                    strServerPort = getResources().getString(R.string.string_port_request); //default port
                }
                client = new Socket(strServerIp, Integer.parseInt(strServerPort));

                // Creating the server socket.
                // client = new Socket(getResources().getString(R.string.string_ip), Integer.parseInt(getResources().getString(R.string.string_port_request))); // Creating the server socket.

                if (client != null) {
                    printwriter = new PrintWriter(client.getOutputStream(), true);
                    //InputStreamReader inputStreamReader = new InputStreamReader(client.getInputStream());
                    din = new DataInputStream(client.getInputStream());
                    //bufferedReader = new BufferedReader(inputStreamReader);
                } else {
                    //Log.e("Server has not bean started on port ", "" + Integer.parseInt(getResources().getString(R.string.string_port_request)));
                    Log.e("Server port ", "" + SavePrefs.getString(AppConstant.prefName,
                            getActivity(), AppConstant.portPref, null));

                }
            } catch (UnknownHostException e) {
                ServerConnection = "FAIL";
                // Log.e("Faild to connect server ", "" + getResources().getString(R.string.string_ip));
                Log.e("Faild to connect", "" + SavePrefs.getString(AppConstant.prefName, getActivity(),
                        AppConstant.ipPref, null));

                e.printStackTrace();
            } catch (IOException e) {
                ServerConnection = "FAIL";
                Log.e("Faild to connect", "" + SavePrefs.getString(AppConstant.prefName,
                        getActivity(), AppConstant.ipPref, null));

                e.printStackTrace();

            }
            return null;
        }

        /**
         * Following method is executed at the end of doInBackground method.
         */
        @SuppressWarnings("unused")
        @Override
        protected void onPostExecute(Void result) {
            dialog.dismiss();
            if (ServerConnection.equals("FAIL")) {

                Log.e("Server Conn", "Fail");
                //  showServerConfigDialog();
            } else {
                if (CanRead) {
                    try {
                        messageSender = new Sender("LOGN"); // Initialize chat sender AsyncTask.
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                            messageSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
                        } else {
                            messageSender.execute();
                        }


                        receiver = new Receiver(); // Initialize chat receiver AsyncTask.

                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)
                            receiver.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
                        else {
                            receiver.execute();
                        }

                    } catch (Exception e) {
                    }
                }
            }
        }

    }
    private class Sender extends AsyncTask<Void, Void, Void> {

        @SuppressWarnings("unused")
        private String message;
        @SuppressWarnings("unused")
        String stat;
        LottieDialog dialog;


        @SuppressWarnings("unused")
        public Sender(String stat) {
            this.stat = stat;
        }

        @SuppressWarnings("unused")
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            dialog = new LottieDialog(getActivity())
                    .setAnimation(R.raw.progress_loading)
                    .setAutoPlayAnimation(true)
                    .setDialogHeightPercentage(.3f)
                    .setDialogBackground(R.color.background)
                    .setAnimationRepeatCount(LottieDialog.INFINITE)
                    .setMessage("Fetching data...");
            dialog.setCancelable(false);
            dialog.show();


        }

        @SuppressWarnings("unused")
        @Override
        protected Void doInBackground(Void... params) {
            try {

                if (stat.equals("STAT|0") || stat.equals("STAT")) {
                    // message = "<STAT|" + 0 + ">";
                    message = "<STAT|" + whichPump + ">";

                } else if (stat.equals("LOGN")) {

                    String strServerUsename = SavePrefs.getString(AppConstant.prefName, getActivity(), AppConstant.userNamePref, null);

                    String strServerPassword = SavePrefs.getString(AppConstant.prefName, getActivity(), AppConstant.passwordPref, null);

                    message = "<LOGN|" + strServerUsename + "|" + strServerPassword + ">";
                    //  message = "<LOGN|admin|AdmiN@123!>";
                } else if (stat.equalsIgnoreCase("HTRX")) {
                    message = "<HTRX|" + whichPump + ">";

                }
                printwriter.write(message);
                printwriter.flush();
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        @SuppressWarnings("unused")
        @Override
        protected void onPostExecute(Void result) {
            Log.e("Client: ", "" + message);
            dialog.dismiss();
        }
    }
    class Receiver extends AsyncTask<Void, Void, Void> {

        private String result;
        byte[] result1;
        LottieDialog dialog;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            dialog = new LottieDialog(getActivity())
                    .setAnimation(R.raw.progress_loading)
                    .setAutoPlayAnimation(true)
                    .setDialogHeightPercentage(.3f)
                    .setDialogBackground(R.color.background)
                    .setAnimationRepeatCount(LottieDialog.INFINITE)
                    .setMessage("Fetching data...");

            dialog.setCancelable(false);
            dialog.show();


        }

        @SuppressWarnings("unused")
        @Override
        protected Void doInBackground(Void... params) {

            while (CanRead) {
                try {
                    if (din.available() > 0) {
                        result1 = new byte[client.getReceiveBufferSize()];
                        din.read(result1);
                        result = new String(result1);

                        Log.e("SERVER", "" + result);

                        publishProgress(null);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            return null;
        }

        @SuppressWarnings("unused")
        @Override
        protected void onProgressUpdate(Void... values) {
            if (result.contains("NACK")) {

                dialog.dismiss();
                NACKServerConnection = "YES";
                Toast.makeText(getActivity(), result.replace("ï¿½", "").replace("<", "")
                        .replace(">", "").split("\\|")[2].toLowerCase().trim(), Toast.LENGTH_LONG).show();

                Log.e("ERROR", "" + result.replace("ï¿½", "").replace("<", "")
                        .replace(">", "").split("\\|")[2].toLowerCase());
            }
            else if (result.contains("ACK")) {
                messageSender = new Sender("HTRX"); // Initialize chat sender AsyncTask.
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                    messageSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
                } else {
                    messageSender.execute();
                }
            }
            else if (result.contains("HTRX")){
                alTransactionList.clear();
//                result = "<HTRX|2|3033005237,20230330181451,,2,1,2,0.85,8.68,124.77,10.1,1,0,,,2,0,,,,Keith,0,0,0,8.68,|3033005236,20230330181438,,2,1,2,0.5,5.15,123.91,10.1,1,0,,,2,0,,,,Keith
                int count = Integer.parseInt(result.replace("ï¿½", "").replace("<", "").
                        replace(">", "").split("\\|")[1].split("\\,")[0]);
                Thread thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        for (int i = 1; i <= count; i++){
                            modelTransactions = new ModelTransactions();
                            String splitResult = result.replace("ï¿½", "").replace("<", "").
                                    replace(">", "").split("\\|")[i+1];
                            modelTransactions.setTranId(splitResult.split("\\,")[0]);
                            modelTransactions.setDateTime(splitResult.split("\\,")[1]);
                            modelTransactions.setProduct(splitResult.split("\\,")[5]);
                            modelTransactions.setAmount(splitResult.split("\\,")[7]);
                            modelTransactions.setVolume(splitResult.split("\\,")[6]);
                            modelTransactions.setPump(splitResult.split("\\,")[3]);
                            modelTransactions.setPrice(splitResult.split("\\,")[9]);
                            modelTransactions.setVolume(splitResult.split("\\,")[6]);
                            modelTransactions.setMop(splitResult.split("\\,")[10]);
                            modelTransactions.setAttandant(splitResult.split("\\,")[19]);
                            alTransactionList.add(modelTransactions);
                        }
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                setupGridView();
                                dialog.dismiss();
                                Log.e("DONE","DONE");
                            }
                        });
                    }
                });
                thread.start();
                Log.e("HTRX COUNT",""+result.replace("ï¿½", "").replace("<", "").
                        replace(">", "").split("\\|")[1].split("\\,")[0]);
            }
//            Log.e("SERVER",""+result);
        }
    }

}